// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            String?
  teacherVerified Boolean   @default(false)
  Essay           Essay[]
  Comment         Comment[]
  classId         String?
  Class           Class?    @relation(fields: [classId], references: [id])
  Teacher         Teacher?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Essay {
  id            String    @id @default(cuid())
  title         String
  content       String
  userId        String
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  aiPossibility Float?
  task          Task?     @relation(fields: [taskId], references: [id])
  taskId        Int?
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  essayId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  essay     Essay    @relation(fields: [essayId], references: [id], onDelete: Cascade)
  replyTo   String?
}

model Class {
  id        String  @id @default(cuid())
  name      String
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  students  User[]
  Words     Words[]
  Tasks     Task[]
}

model Teacher {
  id      String  @id @default(cuid())
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes Class[]
}

model Words {
  id         Int      @id @default(autoincrement())
  word       String
  meaning    String
  translated String
  createdAt  DateTime @default(now())
  classId    String
  Class      Class    @relation(fields: [classId], references: [id])
}

model RoadMap {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  date        DateTime?
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  date        DateTime?
  Class       Class?    @relation(fields: [classId], references: [id])
  classId     String?
  Essay       Essay[]
}
